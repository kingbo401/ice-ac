<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper 
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="com.kingbo401.iceacl.dao.DataGrantRecordDAO">
    <insert id="create" parameterType="DataGrantRecordDO" useGeneratedKeys="true" keyProperty="id">
		insert into ice_data_grant_record(model_id,operation_id,grant_target_id,grant_target_type,tenant,
		status,effective_time,expire_time,create_time,update_time)
		values(#{modelId},#{operationId},#{grantTargetId},#{grantTargetType},#{tenant},
		#{status},#{effectiveTime},#{expireTime},#{createTime},#{updateTime})
	</insert>
	
	<update id="update" parameterType="DataGrantRecordDO">
		update ice_data_grant_record set effective_time=#{effectiveTime},expire_time=#{expireTime},update_time=now()
		where id=#{id}
	</update>
	
	<update id="removeByIds">
		update ice_data_grant_record set status=0,update_time=now() where id in		
		<foreach collection="ids" item="id" index="index" open="(" separator="," close=")">
			#{id}
		</foreach>
	</update>
	
	<update id="removeById">
		update ice_data_grant_record set status=0,update_time=now() where id = #{id}
	</update>
	
	<select id="getById" resultType="DataGrantRecordDO">
		select * from ice_data_grant_record where id = #{id}
	</select>
	
	<select id="getByIds" resultType="DataGrantRecordDO">
		select * from ice_data_grant_record where id in		
		<foreach collection="ids" item="id" index="index" open="(" separator="," close=")">
			#{id}
		</foreach>
	</select>
	
	<update id="removeByParam" parameterType="DataGrantRecordParam">
		update ice_data_grant_record set status=0,update_time=now() where model_id=#{modelId}
		<if test="operationId != null"> and operation_id=#{operationId}</if>
		and grant_target_id=#{grantTargetId} and grant_target_type=#{grantTargetType} and tenant=#{tenant}
	</update>
	
	<select id = "getOneDataGrantRecord" resultType="DataGrantRecordDO">
		select t1.* from ice_data_grant_record t1, ice_data_grant_record_detail t2 
		where t1.id = t2.data_grant_record_id and t1.model_id=#{modelId} and t1.status=1
			<![CDATA[and (t1.expire_time is null or t1.expire_time > now())]]>
			<if test="operationId != null"> and t1.operation_id=#{operationId}</if>
			<if test="propertyId != null">and t2.property_id=#{propertyId}</if>
			limit 1
	</select>
	
	<sql id="queryRecordSubSql">
		where status=1 and 
		<if test="modelId != null"> model_id=#{modelId} </if>
		<if test="operationId != null"> and operation_id=#{operationId}</if>
		and grant_target_id in
		<foreach collection="grantTargetIds" item="grantTargetId" open="(" separator="," close=")">
			#{grantTargetId}
		</foreach>
		and grant_target_type=#{grantTargetType}
		<if test='tenant == "tenant_common_symbol"'>
		    and tenant='tenant_common_symbol'
		</if>
		<if test='tenant != "tenant_common_symbol"'>
		    and tenant in ('tenant_common_symbol',#{tenant})
		</if>
		<if test="returnNotEffective == false">
		and (effective_time is null or effective_time &lt;= now())
		</if>
		and (expire_time is null or expire_time &gt;= now())
	</sql>
	
	<select id = "listDataGrantRecord" parameterType="DataGrantRecordQueryParam" resultType="DataGrantRecordDO">
		select * from ice_data_grant_record 
		<include refid="queryRecordSubSql" />
		order by id desc
	</select>
	
	<select id = "pageDataGrantRecord" parameterType="DataGrantRecordQueryParam" resultType="DataGrantRecordDO">
		select * from ice_data_grant_record 
		<include refid="queryRecordSubSql" />
		order by id desc limit #{offset}, #{pageSize}
	</select>
	
	<select id = "countDataGrantRecord" parameterType="DataGrantRecordQueryParam" resultType="long">
		select count(*) from ice_data_grant_record 
		<include refid="queryRecordSubSql" />
	</select>
	
	<select id = "listTargetIds" parameterType="DataGrantRecordQueryParam" resultType="string">
		select distinct(grant_target_id) from ice_data_grant_record where model_id=#{modelId} 
		<if test="operationId != null"> and operation_id=#{operationId}</if>
		<if test="grantTargetIds != null and grantTargetIds.size>0">
			and grant_target_id in
			<foreach collection="grantTargetIds" item="grantTargetId" index="index" open="(" separator="," close=")">
				#{grantTargetId}
			</foreach>
		</if>
		and grant_target_type=#{grantTargetType}
		<if test='tenant == "tenant_common_symbol"'>
		    and tenant='tenant_common_symbol'
		</if>
		<if test='tenant != "tenant_common_symbol"'>
		    and tenant in ('tenant_common_symbol',#{tenant})
		</if>
		<if test="returnNotEffective == false">
		and (effective_time is null or effective_time &lt;= now())
		</if>
		and (expire_time is null or expire_time &gt;= now())
		and status=1
	</select>
	
	<!-- 通过属性值求交集 -->
	<sql id= "listIdByPropertyValuesSubSql">
		<foreach collection="propertyValuesMap.keys" item="propertyId"  open="" separator="UNION ALL" close="">
			(
			select t1.id from ice_data_grant_record t1, ice_data_grant_record_detail t2
			where t1.model_id=#{modelId} 
			<if test="operationId != null"> and t1.operation_id=#{operationId}</if>
			and t1.grant_target_id in
			<foreach collection="grantTargetIds" item="grantTargetId" open="(" separator="," close=")">
				#{grantTargetId}
			</foreach>
			and t1.grant_target_type=#{grantTargetType}  and t1.status=1
			<if test='tenant == "tenant_common_symbol"'>
		    	and t1.tenant='tenant_common_symbol'
			</if>
			<if test='tenant != "tenant_common_symbol"'>
			    and t1.tenant in ('tenant_common_symbol',#{tenant})
			</if>
			<if test="returnNotEffective == false">
			and (t1.effective_time is null or t1.effective_time &lt;= now()) 
			</if>
			and (t1.expire_time is null or t1.expire_time &gt;= now())
			and t1.id = t2.data_grant_record_id and t2.property_id=#{propertyId} and t2.property_value in
			<foreach collection="propertyValuesMap[propertyId]" item="propertyValue" open="(" separator="," close=")">
				#{propertyValue}
			</foreach>
			)
		</foreach>
	</sql>
	
	<select id = "listIdByPropertyValues" parameterType="DataGrantPropertyValueParam" resultType="long">
		select t3.id from (
			<include refid="listIdByPropertyValuesSubSql" />
		) t3
		group by t3.id having count(t3.id) = #{propertyNum}
	</select>
	
	<select id = "countIdByPropertyValues" parameterType="DataGrantPropertyValueParam" resultType="long">
		select count(*) from(
			select t3.id from (
				<include refid="listIdByPropertyValuesSubSql" />
			) t3
			group by t3.id having count(t3.id) = #{propertyNum}
		) t4
	</select>
	
	<select id = "pageIdByPropertyValues" parameterType="DataGrantPropertyValueParam" resultType="long">
		select t3.id from (
			<include refid="listIdByPropertyValuesSubSql" />
		) t3
		group by t3.id having count(t3.id) = #{propertyNum}
		order by id desc limit #{offset}, #{pageSize}
	</select>
</mapper> 